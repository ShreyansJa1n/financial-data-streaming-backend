version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: blockhouse
      POSTGRES_PASSWORD: blockhouse
      POSTGRES_DB: blockhouse_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  web-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: web_app
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      ALPHA_VANTAGE_API_KEY: ${ALPHA_VANTAGE_API_KEY}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    command: ["/wait-for-postgres.sh", "postgres", "/wait-for-kafka.sh", "kafka", "9092", "make", "-C", "./scripts", "run_development"]
    volumes:
      - ./app/api/:/app/api
      - ./app/core/:/app/core
      - ./app/models/:/app/models
      - ./app/schemas/:/app/schemas
      - ./app/services/:/app/services
      - ./scripts/:/app/scripts
      - ./app/main.py:/app/main.py

  adminer:
    image: adminer:latest
    container_name: adminer
    ports:
      - "8080:8080"
    depends_on:
      - postgres

  kafka:
    image: bitnami/kafka:3.6.0
    container_name: kafka
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    restart: always
  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    restart: always
    

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local